%include "sseutils64.nasm"

 

section .data            ; Sezione contenente dati inizializzati

 

row      equ         8
col	 equ 	     8
col2	 equ	   8


 

; 
; Le matrici si assumono memorizzate per righe
;

 

align 32
inizio:        dq        1.0, 2.0, 3.0, 4.0

align 32
inizio1:        dq      1.0, 1.0, 1.0, 1.0

 

section .bss            ; Sezione contenente dati non inizializzati

 

alignb 32
A:        resq   row*col
alignb 32
B:        resq    col*row
alignb 32
C:        resq    row*col2


 

section .text            ; Sezione contenente il codice macchina

 

global    main

 

main:    start

 

        ; ----------------------------------------
        ; carica le matrici A e B e azzera la matrice C
        ;
        vmovapd        ymm0, [inizio]
        vxorpd        ymm2,ymm2 
        mov        ebx, 0
        mov        ecx, row*col/4
ciclo1: vmovapd        [A+ebx], ymm0
        add        ebx, 32
        dec        ecx
        jnz        ciclo1
        
      	vmovapd      ymm3,[inizio1]
        mov        ebx, 0
        mov        ecx, col*row/4
ciclo2: vmovapd        [B+ebx], ymm3
        add        ebx, 32
        dec        ecx
        jnz        ciclo2
        
         
        mov        ebx, 0
        mov        ecx, row*col2/4
ciclo3:  vmovapd       [C+ebx], ymm2
        add        ebx, 32
        dec        ecx
        jnz        ciclo3       
        
        mov 	eax,0			;i=0
fori:	mov	ebx,0			;j=0
forj:	imul edi, eax, col*8		;
	vxorpd ymm3,ymm3
	
	mov ecx,0			;k=0
fork:	imul esi,eax,col2*8		;
 	imul edx,ecx,col2*8

	vbroadcastsd ymm2,[A+edi+ecx*8]
	vmovapd ymm1,[B+edx+ebx*8]
	vmulpd  ymm1,ymm2
	vaddpd ymm4,ymm1
	
	
	vbroadcastsd ymm2,[A+edi+ecx*8+8]
	vmovapd ymm1,[B+edx+ebx*8+col*8]
	vmulpd  ymm1,ymm2
	vaddpd ymm5,ymm1
	
	vbroadcastsd ymm2,[A+edi+ecx*8+16]
	vmovapd ymm1,[B+edx+ebx*8+col*16]
	vmulpd  ymm1,ymm2
	vaddpd ymm6,ymm1
	
	vbroadcastsd ymm2,[A+edi+ecx*8+24]
	vmovapd ymm1,[B+edx+ebx*8+col*24]
	vmulpd  ymm1,ymm2
	vaddpd ymm7,ymm1
	
        add ecx,4			;
        cmp ecx,col			;
        jb fork			;
        
        vaddpd ymm3,ymm4
        vaddpd ymm3,ymm5
        vaddpd ymm3,ymm6
        vaddpd ymm3,ymm7
        
        vxorpd ymm4,ymm4
        vxorpd ymm5,ymm5
        vxorpd ymm6,ymm6
        vxorpd ymm7,ymm7
        vmovapd [C+esi+ebx*8],ymm3
        
        add ebx,4			;
        cmp ebx,col2			;
        jb forj			;
        
       

        
        add eax,1			;
        cmp eax,row			;
        jb fori			;
        
        
        
       
       vprintpd C,row*col2/4	;
        
        stop
       
    
